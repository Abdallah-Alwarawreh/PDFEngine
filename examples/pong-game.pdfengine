{
  "gameTitle": "My PDF Game",
  "canvasWidth": 500,
  "canvasHeight": 500,
  "globalScript": "const WIDTH = 500;\nconst HEIGHT = 500;\nconst MINHEIGHT = 310;\nconst MAXHEIGHT = 500;\nconst fps = 60;\nlet ball = this.getField(\"field_ball\");\nlet paddleR = this.getField(\"field_paddle_R\");\nlet paddleL = this.getField(\"field_paddle_L\");\n\nlet paddleRPosition;\nlet paddleLPosition;\nlet ballPosition;\nlet ballVelocity;\n\nfunction getPositionFromRect(rect) {\n    const x = (rect[0] + rect[2]) / 2;\n    const y = (rect[1] + rect[3]) / 2;\n    return { x, y };\n}\n\nfunction setRectPosition(rect, position, width = 16, height = 16) {\n    const newRect = rect.slice();\n    newRect[0] = position.x - width / 2;\n    newRect[1] = position.y - height / 2;\n    newRect[2] = position.x + width / 2;\n    newRect[3] = position.y + height / 2;\n    return newRect;\n}\n\nfunction resetBall() {\n    ballPosition.x = WIDTH / 2;\n    ballPosition.y = MAXHEIGHT - MINHEIGHT / 2;\n    ballVelocity.x = Math.random() > 0.5 ? 5 : -5;\n    ballVelocity.y = Math.random() * 6 - 3;\n}\n\nfunction key_pressed(key) {\n    const paddleHeight = paddleR.rect[3] - paddleR.rect[1];\n    switch (key) {\n        case \"s\":\n            if (paddleRPosition.y > MINHEIGHT) paddleRPosition.y -= 5;\n            break;\n        case \"w\":\n            if (paddleRPosition.y < 455) paddleRPosition.y += 5;\n            break;\n    }\n    let paddle = this.getField(\"field_paddle_R\");\n    paddle.rect = setRectPosition(paddle.rect, paddleRPosition, 32, 100);\n}\n\nfunction mainLoop() {\n    ball = this.getField(\"field_ball\");\n    paddleR = this.getField(\"field_paddle_R\");\n    paddleL = this.getField(\"field_paddle_L\");\n    // Update ball position\n    ballPosition.x += ballVelocity.x;\n    ballPosition.y += ballVelocity.y;\n\n    // Ball collisions with walls\n    if (ballPosition.y < MINHEIGHT - 32 || ballPosition.y > 490) {\n        ballVelocity.y *= -1;\n    }\n\n    // Get dimensions\n    const ballWidth = ball.rect[2] - ball.rect[0];\n    const ballHeight = ball.rect[1] - ball.rect[3];\n    const paddleRHeight = paddleR.rect[1] - paddleR.rect[3];\n    const paddleLHeight = paddleL.rect[1] - paddleL.rect[3];\n\n    // Paddle collisions\n    const paddleCollision = (paddlePos, paddleHeight) => {\n        return (\n            ballPosition.y + ballHeight / 2 >= paddlePos.y - paddleHeight / 2 &&\n            ballPosition.y - ballHeight / 2 <= paddlePos.y + paddleHeight / 2\n        );\n    };\n\n    // Right paddle collision\n    if (\n        ballPosition.x + ballWidth / 2 >= paddleRPosition.x - 16 &&\n        paddleCollision(paddleRPosition, paddleRHeight)\n    ) {\n        ballVelocity.x *= -1;\n    }\n\n    // Left paddle collision\n    if (\n        ballPosition.x - ballWidth / 2 <= paddleLPosition.x + 16 &&\n        paddleCollision(paddleLPosition, paddleLHeight)\n    ) {\n        ballVelocity.x *= -1;\n    }\n\n    // Scoring\n    if (ballPosition.x < 8) {\n        resetBall();\n    } else if (ballPosition.x > WIDTH - 8) {\n        resetBall();\n    }\n\n    // AI movement\n    const aiSpeed = 3;\n    if (paddleLPosition.y < ballPosition.y) {\n        paddleLPosition.y = Math.min(paddleLPosition.y + aiSpeed, 455);\n    } else {\n        paddleLPosition.y = Math.max(\n            paddleLPosition.y - aiSpeed,\n            paddleLHeight / 2\n        );\n    }\n\n    ball.rect = setRectPosition(ball.rect, ballPosition);\n    paddleR.rect = setRectPosition(paddleR.rect, paddleRPosition, 32, 100);\n    paddleL.rect = setRectPosition(paddleL.rect, paddleLPosition, 32, 100);\n}\n\nvar whole = this.getField(\"whole\");\nfunction wrappedDraw() {\n    try {\n        whole.display = display.visible;\n        mainLoop();\n        whole.display = display.hidden;\n    } catch (e) {\n        app.alert(e.toString());\n    }\n}\n\nfunction initGame() {\n    if (global.initialized) return;\n    global.initialized = true;\n\n    paddleRPosition = getPositionFromRect(paddleR.rect);\n    paddleLPosition = getPositionFromRect(paddleL.rect);\n    ballPosition = getPositionFromRect(ball.rect);\n    ballVelocity = { x: 5, y: 3 };\n\n    app.setInterval(\"wrappedDraw()\", 1000 / fps);\n}\n\ninitGame();",
  "gameElements": [
    {
      "type": "field",
      "x": 468,
      "y": 100,
      "width": 32,
      "height": 100,
      "name": "field_paddle_R",
      "properties": {
        "color": "#000000",
        "text": "",
        "jsAction": ""
      }
    },
    {
      "type": "button",
      "x": 0,
      "y": 100,
      "width": 32,
      "height": 100,
      "name": "field_paddle_L",
      "properties": {
        "color": "#000000",
        "text": "",
        "jsAction": ""
      }
    },
    {
      "type": "button",
      "x": 235,
      "y": 130,
      "width": 16,
      "height": 16,
      "name": "field_ball",
      "properties": {
        "color": "#ff0000",
        "text": "",
        "jsAction": ""
      }
    },
    {
      "type": "field",
      "x": 184,
      "y": 450,
      "width": 100,
      "height": 50,
      "name": "input",
      "properties": {
        "color": "#e6e6e6",
        "text": "Input Here",
        "jsAction": "key_pressed(event.change)"
      }
    }
  ]
}